// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  rating Float @default(1000)

  sentGameInvites     GameInvite[] @relation("from")
  receivedGameInvites GameInvite[] @relation("to")

  wins   GameResult[] @relation("wins")
  losses GameResult[] @relation("losses")

  currentGame   Game?   @relation(fields: [currentGameId], references: [id])
  currentGameId String?
}

model GameInvite {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  from       User     @relation(name: "from", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  to         User     @relation(name: "to", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String
}

model Game {
  id      String   @id @default(cuid())
  date    DateTime @default(now())
  players User[]
}

model GameResult {
  id          String   @id() @default(cuid())
  date        DateTime @default(now())
  winnerId    String
  winner      User     @relation(name: "wins", fields: [winnerId], references: [id])
  winnerScore Int?
  loserId     String
  loser       User     @relation(name: "losses", fields: [loserId], references: [id])
  loserScore  Int?
}
