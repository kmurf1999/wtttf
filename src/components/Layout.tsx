import { useSession } from 'next-auth/react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useId, useState } from 'react';
import { useNotificationStore } from '../providers/NotifcationProvider';
import { trpc } from '../utils/trpc';
import Header from './Header';
import NotificationCenter from './Notifications/NotificationCenter';

const CurrentGameBanner = () => {
  const id = useId();
  const router = useRouter();
  const session = useSession();
  const [isOpen, setIsOpen] = useState(true);

  const currentGame = trpc.useQuery(['game.play.getCurrentGame'], {
    enabled: session.status === 'authenticated' && !router.query.gameId,
  });

  if (!currentGame.data || !isOpen || router.query.gameId) return null;

  return (
    <div
      id={id}
      className="flex items-center px-4 py-2 mb-4 bg-blue-100 "
      role="alert"
    >
      <svg
        aria-hidden="true"
        className="flex-shrink-0 w-5 h-5 text-blue-700 "
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
          clipRule="evenodd"
        ></path>
      </svg>
      <span className="sr-only">Info</span>
      <div className="ml-3 text-sm font-medium text-blue-700 ">
        Game in progress
      </div>
      <Link href={`/play/${currentGame.data.id}`}>
        <a className="ml-3 bg-blue-200 text-sm font-medium p-2 rounded-lg text-blue-700">
          RECONNECT
        </a>
      </Link>
      <button
        type="button"
        className="ml-auto -mx-1.5 -my-1.5 bg-blue-100 text-blue-500 rounded-lg focus:ring-2 focus:ring-blue-400 p-1.5 hover:bg-blue-200 inline-flex h-8 w-8 "
        data-dismiss-target={id}
        aria-label="Close"
        onClick={() => setIsOpen(false)}
      >
        <span className="sr-only">Close</span>
        <svg
          aria-hidden="true"
          className="w-5 h-5"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fillRule="evenodd"
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clipRule="evenodd"
          ></path>
        </svg>
      </button>
    </div>
  );
};

export default function Layout({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const pushNotification = useNotificationStore(
    (state) => state.pushNotification,
  );

  trpc.useSubscription(['game.invite.streamReceivedInvites'], {
    onNext: (data) => {
      pushNotification({
        type: 'GameInvite',
        data,
      });
    },
  });

  trpc.useSubscription(['game.invite.streamAcceptedInvites'], {
    onNext: (data) => {
      router.push(`/play/${data.id}`);
    },
  });

  return (
    <>
      <Head>
        <title>WTTF</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-screen max-h-screen flex flex-col">
        <div className="grow overflow-y-auto flex flex-col">
          <Header />
          <CurrentGameBanner />
          <main className="relative grow flex flex-col items-center sm:p-6">
            <NotificationCenter />
            {children}
          </main>
          <footer></footer>
        </div>
      </div>
    </>
  );
}
